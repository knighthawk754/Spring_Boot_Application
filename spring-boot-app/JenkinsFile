    pipeline {
        agent any
        tools {
            maven 'maven3.9'
            jdk 'java-17'
        }
        environment {
            SCANNER_HOME = tool 'sonar'
            IMAGE_NAME = "voting"
            BUILD_TAG = "${BUILD_NUMBER}"
            registryCredential = 'ecr:us-east-1:ecr'
            appRegistry = "515966517171.dkr.ecr.us-east-1.amazonaws.com/voting"
            vprofileRegistry = "https://515966517171.dkr.ecr.us-east-1.amazonaws.com"
            reponame = "515966517171.dkr.ecr.us-east-1.amazonaws.com"
        }
        stages {
            stage('Fetch Code') {
                steps {
                    git 'https://github.com/knighthawk754/devops_git.git'
                }
            }
            stage('OWASP Dependency Check') {
                steps {
                    dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DP'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
            stage('Unit Test') {
                steps {
                    sh 'cd spring-boot-app && mvn test'
                }
            }
            stage('Build') {
                steps {
                    sh 'cd spring-boot-app && mvn clean package'
                }
                post {
                    success {
                        echo 'Archiving the artifact...'
                        archiveArtifacts artifacts: 'spring-boot-app/target/*.jar'
                    }
                }
            }
            // stage('OWASP Dependency Check') {
            //     steps {
            //         dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DP'
            //         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            //     }
            // }
            stage('SonarQube Scanner') {
                steps {
                    withSonarQubeEnv('sonarqube') {
                        sh '''$SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=voting \
                            -Dsonar.projectName=voting \
                            -Dsonar.java.binaries=.'''
                    }                
                }
            }
            stage('Quality Gate') {
                steps {
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
            stage('Upload Artifacts') {
                steps {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: '34.228.15.97:8081',
                        groupId: 'spring-boot-web',
                        version: "${env.BUILD_TAG}",
                        repository: 'voting',
                        credentialsId: 'nexus',
                        artifacts: [
                            [artifactId: 'spring-boot-web',
                            classifier: '',
                            file: 'spring-boot-app/target/spring-boot-web.jar',
                            type: 'jar']
                        ]
                    )
                }
            }
            stage('Docker Build') {
                steps {
                    script {
                        def dockerImage = docker.build("${env.IMAGE_NAME}:${env.BUILD_TAG}", "-f ./spring-boot-app/Dockerfile ./spring-boot-app")
                        echo "Docker image built: ${dockerImage.id}"
                    }
                }
            }
            stage('Scan Docker Image with Trivy') {
                steps {
                    script {
                        sh """
                            trivy image --severity HIGH,CRITICAL --exit-code 0 --no-progress ${env.IMAGE_NAME}:${env.BUILD_TAG}
                        """
                    }
                }
                post {
                    failure {
                        echo "Vulnerabilities found! Check the scan results."
                    }
                    success {
                        echo "Image scan passed. No critical vulnerabilities found."
                    }
                }
            }
            stage('Upload App Image') {
                steps {
                    script {
                        docker.withRegistry(vprofileRegistry, registryCredential) {
                            sh """
                                docker tag ${env.IMAGE_NAME}:${env.BUILD_TAG} ${env.reponame}/${env.IMAGE_NAME}:${env.BUILD_TAG}
                                docker push ${env.reponame}/${env.IMAGE_NAME}:${env.BUILD_TAG}
                            """
                        }
                    }
                }
            }
            stage('Update Deployment File') {
                environment {
                    GIT_REPO_NAME = "devops_git"
                    GIT_USER_NAME = "knighthawk754"
                }
                steps {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                                git config user.email "knighthawk754@gmail.com"
                                git config user.name "knighthawk754"
                                sed -i "s#\\(image:.*:\\)[0-9]\\+#\\1''' + BUILD_NUMBER + '''#g" spring-boot-app-manifests/deployment.yml
                                git add spring-boot-app-manifests/deployment.yml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        '''
                    }
                }
            }
        }
    }
